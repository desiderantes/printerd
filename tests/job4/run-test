#!/bin/bash

. "${top_srcdir-.}"/tests/common.sh

# Test "file:" output

INPUT_FILE="$(mktemp /tmp/printerd.XXXXXXXXX)"
FILE_TARGET="$(mktemp /tmp/printerd.XXXXXXXXX)"
function finish {
    rm -f "$INPUT_FILE" "$FILE_TARGET"
}
trap finish EXIT

# Create a printer.
if ! "$PDCLI" --session create-printer job4 "file://${FILE_TARGET}"; then
    printf "pd-cli failed\n"
    result_is 1
fi

# Create a job on that printer.
objpath=/org/freedesktop/printerd/printer/job4
printf "CreateJob\n"
result=$(gdbus call --session \
	       --dest $PD_DEST \
	       --object-path $objpath \
	       --method $PD_IFACE.Printer.CreateJob \
	       '{}' \
	       'job name' \
	       '{}')
if ! diff -u - <(printf "%s\n" "$result" | sed -e 's,[0-9]\+,X,') <<"EOF"
(objectpath '/org/freedesktop/printerd/job/X', @a{sv} {})
EOF
then
    printf "Unexpected result\n"
    result_is 1
fi

# Add a document to it.
jobpath=$(printf "%s" "$result" | sed -ne "s:^.*'\(.*\)'.*$:\1:p")
printf "AddDocument\n"
printf "Text file\n" > "$INPUT_FILE"
if ! $PDCLI --session add-documents "${jobpath##*/}" "$INPUT_FILE"; then
    printf "Failed to add document to job\n"
    result_is 1
fi

# Start the job
printf "Start\n"
result=$(gdbus call --session \
	       --dest $PD_DEST \
	       --object-path $jobpath \
	       --method $PD_IFACE.Job.Start \
	       '{}')
if [ "$result" != "" ]; then
    printf "StartJob should have failed but did not\n"
    result_is 1
fi

# Inspect its properties. State should be cancelled.
printf "Examining properties\n"
if ! diff -u - <(gdbus introspect --session --only-properties \
		       --dest $PD_DEST \
		       --object-path "$jobpath" | \
			grep 'u State = ' | \
			sed -e 's,^ *readonly ,,') <<EOF
u State = 8;
EOF
then
    printf "Properties differ from expected\n"
    result_is 1
fi

# Delete the printer.
printf "DeletePrinter\n"
result=$(gdbus call --session \
	       --dest $PD_DEST \
	       --object-path $PD_PATH/Manager \
	       --method $PD_IFACE.Manager.DeletePrinter \
	       "{}" \
	       $objpath)

if [ "$result" != "()" ]; then
    printf "Expected (): %s\n" "$result"
    result_is 1
fi

result_is 0
